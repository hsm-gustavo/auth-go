basePath: /
definitions:
  auth.AdminResponse:
    properties:
      message:
        example: Welcome to the admin area!
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  auth.AuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  auth.ErrorResponse:
    properties:
      error:
        example: invalid credentials
        type: string
      message:
        example: Email or password is incorrect
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        example: joao@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  auth.MeResponse:
    properties:
      email:
        example: joao@example.com
        type: string
      name:
        example: Jo達o Silva
        type: string
      roles:
        example:
        - admin
        - user
        items:
          type: string
        type: array
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  auth.RefreshRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      email:
        example: joao@example.com
        type: string
      name:
        example: Jo達o Silva
        type: string
      password:
        example: password123
        type: string
    type: object
  auth.RegisterResponse:
    properties:
      id:
        example: 1
        type: integer
      message:
        example: User registered successfully
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        example: joao@example.com
        type: string
      name:
        example: Jo達o Silva
        type: string
      password:
        example: password123
        type: string
    type: object
  user.CreateUserResponse:
    properties:
      id:
        example: 1
        type: integer
      message:
        example: User created successfully
        type: string
    type: object
  user.ErrorResponse:
    properties:
      error:
        example: Invalid email format
        type: string
      message:
        example: Please provide a valid email address
        type: string
    type: object
  user.GetUserResponse:
    properties:
      email:
        example: joao@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Jo達o Silva
        type: string
    type: object
  user.GetUserRolesResponse:
    properties:
      roles:
        example:
        - admin
        - user
        items:
          type: string
        type: array
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: An authentication API for user management
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Authentication API
  version: "1.0"
paths:
  /auth/admin:
    get:
      consumes:
      - application/json
      description: Returns a welcome message for admin users only
      produces:
      - application/json
      responses:
        "200":
          description: Admin welcome message
          schema:
            $ref: '#/definitions/auth.AdminResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Admin welcome message
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access and refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad request - invalid input
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current authenticated user information and roles
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved
          schema:
            $ref: '#/definitions/auth.MeResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad request - invalid input
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized - invalid refresh token
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad request - invalid input
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "409":
          description: Conflict - user already exists
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Check if the API is running and healthy
      produces:
      - application/json
      responses:
        "200":
          description: API is healthy
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check endpoint
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve user information by email address
      parameters:
      - description: User email
        example: joao@example.com
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/user.GetUserResponse'
        "400":
          description: Bad request - invalid email
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Get user by email
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with name, email and password
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/user.CreateUserResponse'
        "400":
          description: Bad request - invalid input
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "409":
          description: Conflict - user already exists
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}/roles:
    get:
      consumes:
      - application/json
      description: Retrieve all roles assigned to a specific user
      parameters:
      - description: User ID
        example: 550e8400-e29b-41d4-a716-446655440000
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User roles retrieved
          schema:
            $ref: '#/definitions/user.GetUserRolesResponse'
        "400":
          description: Bad request - invalid user ID
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Get user roles
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
